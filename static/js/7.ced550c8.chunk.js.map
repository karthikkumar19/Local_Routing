{"version":3,"sources":["components/UI/Spinner/Spinner.js","components/UI/Spinner/Spinner.module.css","components/UI/Input/input.module.css","components/UI/Button/button.module.css","container/Auth/Auth.module.css","components/UI/Input/input.js","components/UI/Button/button.js","container/Auth/Auth.js"],"names":["spinner","className","classes","Loader","module","exports","input","props","inputElement","inputClasses","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","button","disabled","Button","btnType","onClick","clicked","children","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","switchAuthModeHandler","prevState","submitHandler","preventDefault","onAuth","formElementsArray","this","id","config","form","formElement","loading","Spinner","errorMessage","error","message","authRedirect","isAuthenticated","to","authRedirectPath","onSubmit","Component","connect","auth","token","dispatch","actions","onSetAuthRedirectPath"],"mappings":"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","file":"static/js/7.ced550c8.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Spinner.module.css';\n\nconst spinner = () => (\n    <div className={classes.Loader}>Loading...</div>\n);\n\nexport default spinner;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__1twK-\",\"load2\":\"Spinner_load2__2gkgc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"input_Input__3BPgK\",\"Label\":\"input_Label__24bIE\",\"InputElement\":\"input_InputElement__2HI6E\",\"Invalid\":\"input_Invalid__3QqA4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"button_Button__2rvm5\",\"Success\":\"button_Success__2fkNB\",\"Danger\":\"button_Danger__3R9zs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__Bd1Nb\"};","  \nimport React from 'react';\n\nimport classes from './input.module.css';\n\nconst input = ( props ) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div>\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n        </div>\n    );\n\n};\n\nexport default input;\n","import React from 'react';\n\nimport classes from './button.module.css';\n\nconst button = (props) => (\n    <button\n        disabled={props.disabled}\n        className={[classes.Button, classes[props.btnType]].join(' ')}\n        onClick={props.clicked}>{props.children}</button>\n);\n\nexport default button;","import React, {Component} from 'react';\nimport Input from  '../../components/UI/Input/input';\nimport Button from '../../components/UI/Button/button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\nimport {updateObject , checkValidity} from '../../shared/utility';\n\nclass Auth extends Component {\n\n    state={\n        controls:{\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Your Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength:6\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        isSignup:true\n    }\n\n    // componentDidMount(){\n    //     if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\n    //         this.props.onSetAuthRedirectPath();\n    //     }\n    // }\n\n\n    \n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls,{\n            [controlName]: updateObject(this.state.controls[controlName],{\n                value:event.target.value,\n                valid:checkValidity(event.target.value,this.state.controls[controlName].validation),\n                touched:true\n            }) \n        });\n        this.setState({controls:updatedControls});\n    }\n\n    switchAuthModeHandler = () =>{\n        this.setState(prevState => {\n            return{isSignup: !prevState.isSignup};\n        })\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignup);\n    }\n    \n\n    render(){\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n        let form = formElementsArray.map( formElement => (\n            <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n        ));\n\n        if(this.props.loading){\n            form = <Spinner/>\n        }\n\n        let errorMessage = null;\n\n        if(this.props.error){\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            )\n        }\n\n        let authRedirect = null;\n        if(this.props.isAuthenticated){\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n\n        return(\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button clicked={this.switchAuthModeHandler}\n                 btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP' }</Button>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading:state.auth.loading,\n        error:state.auth.error,\n        isAuthenticated:state.auth.token != null,\n        authRedirectPath:state.auth.authRedirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email,password,isSignup)),\n        onSetAuthRedirectPath : () => dispatch(actions.setAuthRedirectPath('/'))\n\n    };\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);"],"sourceRoot":""}